<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>netstandard2.0;netstandard2.1;net6.0;</TargetFrameworks>
		<Version>1.1.5.3</Version>
		<AssemblyVersion>1.1.5.3</AssemblyVersion>
		<FileVersion>1.1.5.3</FileVersion>
		<Authors>BBernard / CajunCoding</Authors>
		<Company>CajunCoding</Company>
		<Description>A set of extensions for working with modern pagination approaches such as Cursor based paging, as well as Offset based pagination, using the RepoDb ORM with Sql Server.</Description>
		<Copyright>Copyright © 2024</Copyright>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageProjectUrl>https://github.com/cajuncoding/GraphQL.RepoDB/tree/main/RepoDb.SqlServer.PagingOperations</PackageProjectUrl>
		<RepositoryUrl>https://github.com/cajuncoding/GraphQL.RepoDB/tree/main/RepoDb.SqlServer.PagingOperations</RepositoryUrl>
		<PackageTags>repodb, paging, pagination, cursor, offset, skip, take, sorting, graphql, graph-ql, hotchocolate, dapper, sqlkata</PackageTags>
		<PackageReleaseNotes>
			Release Notes:
			- Fix SQL building bug not using Raw SQL as specified; improved integration tests to validate this better.
			- Improved raw sql parameter name to be more consistent with RepDb naming conventions.

			Prior Release Notes:
			- Fix Raw SQL validation logic to handle SQL that has been formatted with line breaks.
			- Eliminate Index fields from ICursorPagingParams interface so they don't pollute the parameter as a primitive to be used by consuming apps.
			- Initial release of independent custom extensions for RepoDb to support enhanced Cursor &amp; Offset Paging Query Operations.
			- This allows non-GraphQL projects (e.g. normal REST APIs) to more easily implement modern paging (Cursor or Offset) with the RepoDb ORM and SQL Server.
			- These extensions have been in use in production applications using GraphQL.RepoDb.SqlServer for a long while, but are now available independently.
		</PackageReleaseNotes>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="InternalsVisibleTo.MSBuild" Version="1.1.0">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="RepoDb.SqlServer" Version="1.1.5" />
	</ItemGroup>

	<ItemGroup>
		<!-- NOTE: See Directory.Builds.targets for dynamic MSBuild Xml script as provied by the great Blog article at: https://www.meziantou.net/declaring-internalsvisibleto-in-the-csproj.htm-->
		<!-- Dynamically Adds: [assembly: InternalsVisibleTo("GraphQL.RepoDb.SqlServer")] -->
		<InternalsVisibleTo Include="GraphQL.RepoDb.SqlServer" />
	</ItemGroup>

	<ItemGroup>
	  <ProjectReference Include="..\RepoDb.PagingPrimitives\RepoDbExtensions.PagingPrimitives.csproj" />
	</ItemGroup>

</Project>
